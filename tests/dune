; Run test for host

(executable
 (enabled_if
  (= %{context_name} default))
 (name zq)
 (modules zq)
 (libraries zarith))

(rule
 (enabled_if
  (= %{context_name} default))
 (action
  (with-stdout-to
   zq.output
   (run ./zq.exe))))

; Run test for Solo5 SPT target

(rule
 (copy zq.ml zq_freestanding.ml))

(rule (with-stdout-to startup.c (echo """
#include <solo5.h>
#define CAML_NAME_SPACE
#include <caml/callback.h>

static char *unused_argv[] = { \"mirage\", NULL };

void _nolibc_init(uintptr_t heap_start, size_t heap_size); // defined in solo5-libc/sysdeps_solo5.c

int solo5_app_main(const struct solo5_start_info *si) {
    _nolibc_init(si->heap_start, si->heap_size);
    caml_startup(unused_argv);
}
""")))

(rule (with-stdout-to manifest.json (echo """
{
  \"type\": \"solo5.manifest\",
  \"version\": 1,
  \"devices\": []
}
""")))

(executable
 (enabled_if
  (= %{context_name} freestanding))
 (name zq_freestanding)
 (modules zq_freestanding)
 (libraries zarith)
 (link_flags :standard -cclib "-z solo5-abi=spt")
 (foreign_stubs
  (language c)
  (names startup manifest)))

(rule
 (enabled_if
  (= %{context_name} freestanding))
 (targets manifest.c)
 (deps manifest.json)
 (action
  (run solo5-elftool gen-manifest manifest.json manifest.c)))

; Run solo5 code

(rule
 (enabled_if
  (= %{context_name} freestanding))
 (deps zq_freestanding.exe)
 (action
  (with-accepted-exit-codes
   1
   (with-stdout-to
    zq.output.full
    (run solo5-spt zq_freestanding.exe)))))

; Remove solo5 intro

(rule
 (enabled_if
  (= %{context_name} freestanding))
 (deps zq.output.full)
 (action
  (with-stdout-to
   zq.output
   (bash "head -n -1 zq.output.full | tail -n +12 -"))))

; Check results

(rule
 (alias runtest)
 (action
  (diff zq.expected zq.output)))

(rule
 (target zq.expected)
 (enabled_if
  (= %{arch_sixtyfour} true))
 (action
  (copy zq.output64 %{target})))

(rule
 (target zq.expected)
 (enabled_if
  (= %{arch_sixtyfour} false))
 (action
  (copy zq.output32 %{target})))
